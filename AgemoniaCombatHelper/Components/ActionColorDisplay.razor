@if (Entity is not null)
{
    <div>
        <img class="@DisplayClass" src="@ImageUrl" @onclick:stopPropagation="true" @onclick="TogglePopover" />
        @if (!IsEnemy)
        {
            <div style="@PopOverDisplay">
                <img src="images/red_hero.png" @onclick:stopPropagation="true" @onclick="() => SelectColor(ActionColor.Red)" />
                <img src="images/blue_hero.png" @onclick:stopPropagation="true" @onclick="() => SelectColor(ActionColor.Blue)" />
                <img src="images/green_hero.png" @onclick:stopPropagation="true" @onclick="() => SelectColor(ActionColor.Green)" />
            </div>
        }
    </div>
}

@code 
{
    [Inject]
    public CombatController? controller { get; set; }
    [CascadingParameter]
    public Entity? Entity { get; set; }

    private string DisplayClass = "";
    private string ImageUrl = "";
    private string PopOverDisplay = "display:none;";

    private bool IsEnemy;

    protected override void OnParametersSet()
    {
        IsEnemy = Entity is Enemy;
        SetImageUrl();
        DisplayClass = IsEnemy ? "enemy-color-display" : "hero-color-display";
        base.OnParametersSet();
    }
    private void TogglePopover()
    {
        if (IsEnemy) return;
        PopOverDisplay = PopOverDisplay == "display:none;" ? "display:block;" : "display:none;";
    }
    private void SelectColor(ActionColor colorToChangeTo)
    {
        Entity!.ActionColor = colorToChangeTo;
        controller?.ArrangeEntities();
        controller?.RefreshDisplay();
        SetImageUrl();
        TogglePopover();
    }
    private void SetImageUrl()
    {
        string entityType = IsEnemy ? "enemy" : "hero";
        ImageUrl = $"images/{Entity?.ActionColor.ToString()}_{entityType}.png";
    }
}
