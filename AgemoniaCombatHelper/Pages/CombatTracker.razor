@page "/"

<PageTitle>Agemonia Combat Helper</PageTitle>
@foreach (var entity in controller?.TurnOrder!)
{
    if (entity is Hero)
    {
        <CascadingValue Value="(Hero)entity">
            <HeroComponent @key="entity" />
        </CascadingValue>
    }
    else
    {
        <CascadingValue Value="(Enemy)entity">
            <EnemyComponent @key="entity" />
        </CascadingValue>
    }
}

<button class="btn btn-primary" @onclick="() => addHeroModal?.Open()">Add Hero</button>
<button class="btn btn-primary" @onclick="() => selectScenarioModal?.Open()">Select Scenario</button>
<button class="btn btn-primary" @onclick="() => controller.DrawNewCard()">Draw Initiative Card</button>
<Modal @ref="addHeroModal" Title="Add Hero">
    <AddHero />
</Modal>
<Modal @ref="selectScenarioModal" Title="Select Scenario">
    <SelectScenario />
</Modal>


@code{
    [Inject]
    public CombatController? controller { get; set; }
    [Inject]
    public HttpClient? Client { get; set; }

    private Modal? addHeroModal;
    private Modal? selectScenarioModal;

    protected override async Task<CombatController> OnInitializedAsync()
    {
        controller?.SetCardsFromJson(await Client?.GetFromJsonAsync<InitiativeDeck>("InitiativeCards.json")!);
        controller?.SetScenariosFromJson(await Client?.GetFromJsonAsync<Scenarios>("Scenarios.json")!);
        return controller!;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) controller?.SetCombatTracker(this);
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
