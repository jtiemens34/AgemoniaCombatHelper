@page "/"

<PageTitle>Agemonia Combat Helper</PageTitle>
@foreach (var entity in controller.TurnOrder)
{
    if (entity is Hero)
    {
        <HeroComponent @key="entity" Hero="(Hero)entity" />
    }
    else
    {
        <EnemyComponent @key="entity" Enemy="(Enemy)entity" />
    }
}

<button class="btn btn-primary" @onclick="() => addHeroModal?.Open()">Add Hero!</button>
<button class="btn btn-primary" @onclick="() => modal2?.Open()">Modal 2 Open</button>
<Modal @ref="addHeroModal">
    <Title>Add Hero</Title>
    <Body>
        <AddHero ParentModal="@addHeroModal" />
    </Body>
</Modal>
<Modal @ref="modal2">
    <Title>Modal 2</Title>
    <Body>
        <h3>Modal 2</h3>
    </Body>
</Modal>


@code{
    [Inject]
    public CombatController controller { get; set; }
    [Inject]
    public HttpClient Client { get; private set; }

    private Modal addHeroModal;
    private Modal modal2;

    public Hero GreenPlayer = new(HeroClass.Matajam, 1);
    public Hero BluePlayer = new(HeroClass.ZuvaSai, 1);
    public Hero NoActionPlayer = new(HeroClass.Venia, 1);

    public Enemy RedEnemy = new("Red Enemy", 5, 0);
    public Enemy GreenEnemy = new("Green Enemy", 5, 0);
    public Enemy BlueEnemy = new("Blue Enemy", 5, 0);

    protected override async Task<CombatController> OnInitializedAsync()
    {
        controller.SetCardsFromJson(await Client.GetFromJsonAsync<InitiativeDeck>("InitiativeCards.json"));

        BluePlayer.ActionColor = ActionColor.Blue;
        GreenPlayer.ActionColor = ActionColor.Green;

        RedEnemy.ActionColor = ActionColor.Red;
        BlueEnemy.ActionColor = ActionColor.Blue;
        GreenEnemy.ActionColor = ActionColor.Green;

        RedEnemy.EnemyAttack = new(5, AttackSymbol.HalfOpen, new(Models.Attribute.Agility, 3));
        BlueEnemy.EnemyAttack = new(5, AttackSymbol.HalfOpen, new(Models.Attribute.Agility, 3));
        GreenEnemy.EnemyAttack = new(5, AttackSymbol.HalfOpen, new(Models.Attribute.Agility, 3));

        controller.AddHero(GreenPlayer);
        controller.AddHero(BluePlayer);
        controller.AddHero(NoActionPlayer);

        controller.AddEnemy(RedEnemy);
        controller.AddEnemy(GreenEnemy);
        controller.AddEnemy(BlueEnemy);

        controller.DrawNewCard();

        return controller;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) controller.SetCombatTracker(this);
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
